{"version":3,"file":"daggy.js","sources":["../node_modules/lodash.tostring/index.js","../node_modules/sanctuary-type-identifiers/index.js","../src/daggy.js"],"sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n","import toString from 'lodash.tostring';\nimport type from 'sanctuary-type-identifiers';\n\n// const MAX_DEFAULT_FIELDS = 10\n\n// Names of prop used to store:\n// * name of variant of a sum type\nconst TAG = '@@tag';\n// * array of arguments used to create a value (to speed up `cata`)\nconst VALUES = '@@values';\n// * `@@type` of its returned results\nconst TYPE = '@@type';\n// * `@@type` of variant constructor's returned results\nconst RET_TYPE = '@@ret_type';\n\nexport function tagged(typeName, fields) {\n  const proto = {toString: tagged$toString};\n  // this way we avoid named function\n  const typeRep = makeConstructor(fields, proto);\n  typeRep.toString = typeRepToString;\n  typeRep.prototype = proto;\n  typeRep.is = isType;\n  typeRep[TYPE] = typeName;\n  proto.constructor = typeRep;\n  return typeRep;\n}\n\nexport function taggedSum(typeName, constructors) {\n  const proto = {cata: sum$cata, toString: sum$toString};\n  const typeRep = proto.constructor = {\n    toString: typeRepToString,\n    prototype: proto,\n    is: isType,\n    '@@type': typeName,\n  };\n  Object.keys(constructors).forEach(tag => {\n    const fields = constructors[tag];\n    const tagProto = Object.create(proto);\n    defProp(tagProto, TAG, tag);\n    if (fields.length === 0) {\n      typeRep[tag] = makeValue(fields, tagProto, [], 0);\n      typeRep[tag].is = sum$isUnit;\n      return;\n    }\n    typeRep[tag] = makeConstructor(fields, tagProto);\n    typeRep[tag].is = sum$isVariant;\n    typeRep[tag][TAG] = tag;\n    typeRep[tag][RET_TYPE] = typeName;\n    typeRep[tag].toString = sum$ctrToString;\n  });\n  return typeRep;\n}\n\nfunction sum$cata(fs) {\n  const tag = this[TAG];\n  if (!fs[tag]) {\n    throw new TypeError(`Constructors given to cata didn't include: ${tag}`);\n  }\n  return fs[tag](...this[VALUES]);\n}\n\nfunction sum$ctrToString() {\n  return `${this[RET_TYPE]}.${this[TAG]}`;\n}\n\nfunction sum$toString() {\n  return `${this.constructor[TYPE]}.${\n    this[TAG]}${arrToString(this[VALUES])}`;\n}\n\nfunction typeRepToString() {\n  return this[TYPE];\n}\n\nfunction tagged$toString() {\n  return this.constructor[TYPE] + arrToString(this[VALUES]);\n}\n\nfunction sum$isVariant(val) {\n  return Boolean(val) &&\n        this[TAG] === val[TAG] &&\n        this[RET_TYPE] === type(val);\n}\n\nfunction sum$isUnit(val) {\n  return this === val || Boolean(val) &&\n        this[TAG] === val[TAG] &&\n        type(this) === type(val);\n}\n\nfunction isType(val) {\n  return this[TYPE] === type(val);\n}\n\nfunction makeValue(fields, proto, values, argumentsLength) {\n  if (argumentsLength !== fields.length) {\n    throw new TypeError(\n      `Expected ${fields.length} arguments, got ${argumentsLength}`\n    );\n  }\n  const obj = Object.create(proto);\n  defProp(obj, VALUES, values);\n  for (let idx = 0; idx < fields.length; idx += 1) {\n    obj[fields[idx]] = values[idx];\n  }\n  return obj;\n}\n\n// adopted version of withValue from    https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\nfunction defProp(obj, prop, val) {\n  const desc = defProp.desc || (\n    defProp.desc = {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: null,\n    }\n  );\n  desc.value = val;\n  Object.defineProperty(obj, prop, desc);\n}\n\n// optimised version of `arr.map(toString).join(', ')`\nfunction arrToString(arr) {\n  if (arr.length === 0) return '';\n  let str = `(${toString(arr[0])}`;\n  for (let idx = 1; idx < arr.length; idx += 1) {\n    str = `${str}, ${toString(arr[idx])}`;\n  }\n  return `${str})`;\n}\n\nfunction makeConstructor(fields, proto) {\n  return Object.defineProperty(\n    (...args) => makeValue(fields, proto, args, args.length)\n    , 'length'\n    , {value: fields.length}\n  );\n}\n"],"names":["global","TAG","VALUES","TYPE","RET_TYPE","tagged","typeName","fields","proto","toString","tagged$toString","typeRep","makeConstructor","typeRepToString","prototype","is","isType","constructor","taggedSum","constructors","cata","sum$cata","sum$toString","keys","forEach","tag","tagProto","Object","create","length","makeValue","sum$isUnit","sum$isVariant","sum$ctrToString","fs","TypeError","arrToString","val","Boolean","type","values","argumentsLength","obj","idx","defProp","prop","desc","value","defineProperty","arr","str","args"],"mappings":"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"}